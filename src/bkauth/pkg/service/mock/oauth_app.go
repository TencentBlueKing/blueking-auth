// Code generated by MockGen. DO NOT EDIT.
// Source: oauth_app.go
//
// Generated by this command:
//
//	mockgen -source=oauth_app.go -destination=./mock/oauth_app.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	types "bkauth/pkg/service/types"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOAuthAppService is a mock of OAuthAppService interface.
type MockOAuthAppService struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthAppServiceMockRecorder
	isgomock struct{}
}

// MockOAuthAppServiceMockRecorder is the mock recorder for MockOAuthAppService.
type MockOAuthAppServiceMockRecorder struct {
	mock *MockOAuthAppService
}

// NewMockOAuthAppService creates a new mock instance.
func NewMockOAuthAppService(ctrl *gomock.Controller) *MockOAuthAppService {
	mock := &MockOAuthAppService{ctrl: ctrl}
	mock.recorder = &MockOAuthAppServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthAppService) EXPECT() *MockOAuthAppServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOAuthAppService) Create(oauthApp types.OAuthApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", oauthApp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOAuthAppServiceMockRecorder) Create(oauthApp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOAuthAppService)(nil).Create), oauthApp)
}

// Exists mocks base method.
func (m *MockOAuthAppService) Exists(appCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", appCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockOAuthAppServiceMockRecorder) Exists(appCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockOAuthAppService)(nil).Exists), appCode)
}

// Get mocks base method.
func (m *MockOAuthAppService) Get(appCode string) (types.OAuthApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", appCode)
	ret0, _ := ret[0].(types.OAuthApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOAuthAppServiceMockRecorder) Get(appCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOAuthAppService)(nil).Get), appCode)
}

// Update mocks base method.
func (m *MockOAuthAppService) Update(oauthApp types.OAuthApp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", oauthApp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOAuthAppServiceMockRecorder) Update(oauthApp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOAuthAppService)(nil).Update), oauthApp)
}
