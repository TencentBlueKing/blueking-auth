// Code generated by MockGen. DO NOT EDIT.
// Source: app.go
//
// Generated by this command:
//
//	mockgen -source=app.go -destination=./mock/app.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	types "bkauth/pkg/service/types"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAppService is a mock of AppService interface.
type MockAppService struct {
	ctrl     *gomock.Controller
	recorder *MockAppServiceMockRecorder
	isgomock struct{}
}

// MockAppServiceMockRecorder is the mock recorder for MockAppService.
type MockAppServiceMockRecorder struct {
	mock *MockAppService
}

// NewMockAppService creates a new mock instance.
func NewMockAppService(ctrl *gomock.Controller) *MockAppService {
	mock := &MockAppService{ctrl: ctrl}
	mock.recorder = &MockAppServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppService) EXPECT() *MockAppServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAppService) Create(app types.App, createdSource string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", app, createdSource)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAppServiceMockRecorder) Create(app, createdSource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAppService)(nil).Create), app, createdSource)
}

// CreateWithSecret mocks base method.
func (m *MockAppService) CreateWithSecret(app types.App, appSecret, createdSource string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithSecret", app, appSecret, createdSource)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithSecret indicates an expected call of CreateWithSecret.
func (mr *MockAppServiceMockRecorder) CreateWithSecret(app, appSecret, createdSource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithSecret", reflect.TypeOf((*MockAppService)(nil).CreateWithSecret), app, appSecret, createdSource)
}

// Delete mocks base method.
func (m *MockAppService) Delete(code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAppServiceMockRecorder) Delete(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppService)(nil).Delete), code)
}

// Exists mocks base method.
func (m *MockAppService) Exists(code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockAppServiceMockRecorder) Exists(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockAppService)(nil).Exists), code)
}

// Get mocks base method.
func (m *MockAppService) Get(code string) (types.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", code)
	ret0, _ := ret[0].(types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAppServiceMockRecorder) Get(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAppService)(nil).Get), code)
}

// List mocks base method.
func (m *MockAppService) List(tenantMode, tenantID string, page, pageSize int, orderBy, orderByDirection string) (int, []types.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tenantMode, tenantID, page, pageSize, orderBy, orderByDirection)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]types.App)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockAppServiceMockRecorder) List(tenantMode, tenantID, page, pageSize, orderBy, orderByDirection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAppService)(nil).List), tenantMode, tenantID, page, pageSize, orderBy, orderByDirection)
}

// NameExists mocks base method.
func (m *MockAppService) NameExists(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameExists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NameExists indicates an expected call of NameExists.
func (mr *MockAppServiceMockRecorder) NameExists(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameExists", reflect.TypeOf((*MockAppService)(nil).NameExists), name)
}
