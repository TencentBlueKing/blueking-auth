// Code generated by MockGen. DO NOT EDIT.
// Source: scope.go
//
// Generated by this command:
//
//	mockgen -source=scope.go -destination=./mock/scope.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	types "bkauth/pkg/service/types"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockScopeService is a mock of ScopeService interface.
type MockScopeService struct {
	ctrl     *gomock.Controller
	recorder *MockScopeServiceMockRecorder
	isgomock struct{}
}

// MockScopeServiceMockRecorder is the mock recorder for MockScopeService.
type MockScopeServiceMockRecorder struct {
	mock *MockScopeService
}

// NewMockScopeService creates a new mock instance.
func NewMockScopeService(ctrl *gomock.Controller) *MockScopeService {
	mock := &MockScopeService{ctrl: ctrl}
	mock.recorder = &MockScopeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScopeService) EXPECT() *MockScopeServiceMockRecorder {
	return m.recorder
}

// BulkCreate mocks base method.
func (m *MockScopeService) BulkCreate(targetID string, scopes []types.Scope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreate", targetID, scopes)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreate indicates an expected call of BulkCreate.
func (mr *MockScopeServiceMockRecorder) BulkCreate(targetID, scopes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreate", reflect.TypeOf((*MockScopeService)(nil).BulkCreate), targetID, scopes)
}

// BulkDelete mocks base method.
func (m *MockScopeService) BulkDelete(targetID string, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDelete", targetID, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDelete indicates an expected call of BulkDelete.
func (mr *MockScopeServiceMockRecorder) BulkDelete(targetID, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockScopeService)(nil).BulkDelete), targetID, ids)
}

// ListByTarget mocks base method.
func (m *MockScopeService) ListByTarget(targetID string) ([]types.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTarget", targetID)
	ret0, _ := ret[0].([]types.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByTarget indicates an expected call of ListByTarget.
func (mr *MockScopeServiceMockRecorder) ListByTarget(targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTarget", reflect.TypeOf((*MockScopeService)(nil).ListByTarget), targetID)
}

// Update mocks base method.
func (m *MockScopeService) Update(targetID string, scope types.Scope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", targetID, scope)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockScopeServiceMockRecorder) Update(targetID, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScopeService)(nil).Update), targetID, scope)
}
