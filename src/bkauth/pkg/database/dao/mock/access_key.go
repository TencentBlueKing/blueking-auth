// Code generated by MockGen. DO NOT EDIT.
// Source: access_key.go
//
// Generated by this command:
//
//	mockgen -source=access_key.go -destination=./mock/access_key.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	dao "bkauth/pkg/database/dao"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessKeyManager is a mock of AccessKeyManager interface.
type MockAccessKeyManager struct {
	ctrl     *gomock.Controller
	recorder *MockAccessKeyManagerMockRecorder
	isgomock struct{}
}

// MockAccessKeyManagerMockRecorder is the mock recorder for MockAccessKeyManager.
type MockAccessKeyManagerMockRecorder struct {
	mock *MockAccessKeyManager
}

// NewMockAccessKeyManager creates a new mock instance.
func NewMockAccessKeyManager(ctrl *gomock.Controller) *MockAccessKeyManager {
	mock := &MockAccessKeyManager{ctrl: ctrl}
	mock.recorder = &MockAccessKeyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessKeyManager) EXPECT() *MockAccessKeyManagerMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockAccessKeyManager) Count(appCode string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", appCode)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockAccessKeyManagerMockRecorder) Count(appCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockAccessKeyManager)(nil).Count), appCode)
}

// Create mocks base method.
func (m *MockAccessKeyManager) Create(accessKey dao.AccessKey) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", accessKey)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccessKeyManagerMockRecorder) Create(accessKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccessKeyManager)(nil).Create), accessKey)
}

// CreateWithTx mocks base method.
func (m *MockAccessKeyManager) CreateWithTx(tx *sqlx.Tx, accessKey dao.AccessKey) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithTx", tx, accessKey)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithTx indicates an expected call of CreateWithTx.
func (mr *MockAccessKeyManagerMockRecorder) CreateWithTx(tx, accessKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithTx", reflect.TypeOf((*MockAccessKeyManager)(nil).CreateWithTx), tx, accessKey)
}

// DeleteByAppCodeWithTx mocks base method.
func (m *MockAccessKeyManager) DeleteByAppCodeWithTx(tx *sqlx.Tx, appCode string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByAppCodeWithTx", tx, appCode)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByAppCodeWithTx indicates an expected call of DeleteByAppCodeWithTx.
func (mr *MockAccessKeyManagerMockRecorder) DeleteByAppCodeWithTx(tx, appCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByAppCodeWithTx", reflect.TypeOf((*MockAccessKeyManager)(nil).DeleteByAppCodeWithTx), tx, appCode)
}

// DeleteByID mocks base method.
func (m *MockAccessKeyManager) DeleteByID(appCode string, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", appCode, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockAccessKeyManagerMockRecorder) DeleteByID(appCode, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockAccessKeyManager)(nil).DeleteByID), appCode, id)
}

// Exists mocks base method.
func (m *MockAccessKeyManager) Exists(appCode, appSecret string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", appCode, appSecret)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockAccessKeyManagerMockRecorder) Exists(appCode, appSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockAccessKeyManager)(nil).Exists), appCode, appSecret)
}

// ExistsByAppCodeAndID mocks base method.
func (m *MockAccessKeyManager) ExistsByAppCodeAndID(appCode string, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByAppCodeAndID", appCode, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByAppCodeAndID indicates an expected call of ExistsByAppCodeAndID.
func (mr *MockAccessKeyManagerMockRecorder) ExistsByAppCodeAndID(appCode, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByAppCodeAndID", reflect.TypeOf((*MockAccessKeyManager)(nil).ExistsByAppCodeAndID), appCode, id)
}

// List mocks base method.
func (m *MockAccessKeyManager) List() ([]dao.AccessKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]dao.AccessKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAccessKeyManagerMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccessKeyManager)(nil).List))
}

// ListAccessKeyByAppCode mocks base method.
func (m *MockAccessKeyManager) ListAccessKeyByAppCode(appCode string) ([]dao.AccessKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessKeyByAppCode", appCode)
	ret0, _ := ret[0].([]dao.AccessKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessKeyByAppCode indicates an expected call of ListAccessKeyByAppCode.
func (mr *MockAccessKeyManagerMockRecorder) ListAccessKeyByAppCode(appCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessKeyByAppCode", reflect.TypeOf((*MockAccessKeyManager)(nil).ListAccessKeyByAppCode), appCode)
}

// ListWithCreatedAtByAppCode mocks base method.
func (m *MockAccessKeyManager) ListWithCreatedAtByAppCode(appCode string) ([]dao.AccessKeyWithCreatedAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithCreatedAtByAppCode", appCode)
	ret0, _ := ret[0].([]dao.AccessKeyWithCreatedAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithCreatedAtByAppCode indicates an expected call of ListWithCreatedAtByAppCode.
func (mr *MockAccessKeyManagerMockRecorder) ListWithCreatedAtByAppCode(appCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithCreatedAtByAppCode", reflect.TypeOf((*MockAccessKeyManager)(nil).ListWithCreatedAtByAppCode), appCode)
}

// UpdateByID mocks base method.
func (m *MockAccessKeyManager) UpdateByID(id int64, updateFiledMap map[string]any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", id, updateFiledMap)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockAccessKeyManagerMockRecorder) UpdateByID(id, updateFiledMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockAccessKeyManager)(nil).UpdateByID), id, updateFiledMap)
}
