// Code generated by MockGen. DO NOT EDIT.
// Source: app.go
//
// Generated by this command:
//
//	mockgen -source=app.go -destination=./mock/app.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	dao "bkauth/pkg/database/dao"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockAppManager is a mock of AppManager interface.
type MockAppManager struct {
	ctrl     *gomock.Controller
	recorder *MockAppManagerMockRecorder
	isgomock struct{}
}

// MockAppManagerMockRecorder is the mock recorder for MockAppManager.
type MockAppManagerMockRecorder struct {
	mock *MockAppManager
}

// NewMockAppManager creates a new mock instance.
func NewMockAppManager(ctrl *gomock.Controller) *MockAppManager {
	mock := &MockAppManager{ctrl: ctrl}
	mock.recorder = &MockAppManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppManager) EXPECT() *MockAppManagerMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockAppManager) Count(tenantType, tenantID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", tenantType, tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockAppManagerMockRecorder) Count(tenantType, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockAppManager)(nil).Count), tenantType, tenantID)
}

// CreateWithTx mocks base method.
func (m *MockAppManager) CreateWithTx(tx *sqlx.Tx, app dao.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithTx", tx, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithTx indicates an expected call of CreateWithTx.
func (mr *MockAppManagerMockRecorder) CreateWithTx(tx, app any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithTx", reflect.TypeOf((*MockAppManager)(nil).CreateWithTx), tx, app)
}

// Exists mocks base method.
func (m *MockAppManager) Exists(code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockAppManagerMockRecorder) Exists(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockAppManager)(nil).Exists), code)
}

// Get mocks base method.
func (m *MockAppManager) Get(code string) (dao.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", code)
	ret0, _ := ret[0].(dao.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAppManagerMockRecorder) Get(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAppManager)(nil).Get), code)
}

// List mocks base method.
func (m *MockAppManager) List(tenantType, tenantID string, page, pageSize int, orderBy, orderByDirection string) ([]dao.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tenantType, tenantID, page, pageSize, orderBy, orderByDirection)
	ret0, _ := ret[0].([]dao.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAppManagerMockRecorder) List(tenantType, tenantID, page, pageSize, orderBy, orderByDirection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAppManager)(nil).List), tenantType, tenantID, page, pageSize, orderBy, orderByDirection)
}

// NameExists mocks base method.
func (m *MockAppManager) NameExists(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameExists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NameExists indicates an expected call of NameExists.
func (mr *MockAppManagerMockRecorder) NameExists(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameExists", reflect.TypeOf((*MockAppManager)(nil).NameExists), name)
}
