// Code generated by MockGen. DO NOT EDIT.
// Source: scope.go

// Package mock is a generated GoMock package.
package mock

import (
	dao "bkauth/pkg/database/dao"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScopeManager is a mock of ScopeManager interface.
type MockScopeManager struct {
	ctrl     *gomock.Controller
	recorder *MockScopeManagerMockRecorder
}

// MockScopeManagerMockRecorder is the mock recorder for MockScopeManager.
type MockScopeManagerMockRecorder struct {
	mock *MockScopeManager
}

// NewMockScopeManager creates a new mock instance.
func NewMockScopeManager(ctrl *gomock.Controller) *MockScopeManager {
	mock := &MockScopeManager{ctrl: ctrl}
	mock.recorder = &MockScopeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScopeManager) EXPECT() *MockScopeManagerMockRecorder {
	return m.recorder
}

// BulkCreate mocks base method.
func (m *MockScopeManager) BulkCreate(scopes []dao.Scope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreate", scopes)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreate indicates an expected call of BulkCreate.
func (mr *MockScopeManagerMockRecorder) BulkCreate(scopes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreate", reflect.TypeOf((*MockScopeManager)(nil).BulkCreate), scopes)
}

// BulkDelete mocks base method.
func (m *MockScopeManager) BulkDelete(targetID string, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkDelete", targetID, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkDelete indicates an expected call of BulkDelete.
func (mr *MockScopeManagerMockRecorder) BulkDelete(targetID, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockScopeManager)(nil).BulkDelete), targetID, ids)
}

// ListByTargetID mocks base method.
func (m *MockScopeManager) ListByTargetID(targetID string) ([]dao.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTargetID", targetID)
	ret0, _ := ret[0].([]dao.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByTargetID indicates an expected call of ListByTargetID.
func (mr *MockScopeManagerMockRecorder) ListByTargetID(targetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTargetID", reflect.TypeOf((*MockScopeManager)(nil).ListByTargetID), targetID)
}

// Update mocks base method.
func (m *MockScopeManager) Update(targetID, scopeID string, scope dao.Scope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", targetID, scopeID, scope)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockScopeManagerMockRecorder) Update(targetID, scopeID, scope interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScopeManager)(nil).Update), targetID, scopeID, scope)
}
